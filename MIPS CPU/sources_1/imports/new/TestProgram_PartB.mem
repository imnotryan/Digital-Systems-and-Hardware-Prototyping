
//BELOW PROGRAM WORKS
//30420000 // andi $2, $2, 0; //reset [$2] to zero
//30630000 // andi $3, $3, 0; //resets[$3] to zero
//34421234 // ori $2, $2, 0x1234
//00021400 // sll $2, $2, 16
//34425678 // ori $2,$2, 0x5678
//00620030 // rev $3, $2
//3021FFFF // andi $1, $1, 65535
//3063FFFF //andi $3, $3, 65535
//ABOVE PROGRAM WORKS

//BELOW PROGRAM WORKS

//30420000 // andi $2, $2, 0; //reset [$2] to zero
//30630000 // andi $3, $3, 0; //resets[$3] to zero
//34425555 // ori $2, $2, 0x00005555 // puts 0x00005555 into reg $2
//00021400 // sll $2, $2, 16 //$2 now should be 0x55550000
//34421111 // ori $2, $2, 0x1111 //$ should now be 0x55551111
//0062002F // rbit $3, $2
//3021FFFF // andi $1, $1, 65535
//3063FFFF //andi $3, $3, 65535

//ABOVE PROGRAM WORKS

//BELOW PROGRAM WORKS
//30420000 // andi $2, $2, 0; //reset [$2] to zero
//30630000 // andi $3, $3, 0; //resets[$3] to zero
//34420607 // ori $2, $2, 1543 // loads $2 with 1543
//00021400 // sll $2, $2, 16 [$2] = 0x06070000
//34420809 // ori #2, $2, 2057 [$2] = 0x06070809
//34630102 // ori $3, $3, 258 [$3] = 0x00000102
//00031C00 // sll $3, $3, 16 [$3] = 0x01020000
//34630304 // ori $3, $3, 772 [$3] = 0x01020304
//0062182D // add8 $3, $3, $2 [$3] = 0x07090B0D adding $3 and $2 and put it in $3
//3021FFFF // andi $1, $1, 65535
//3063FFFF //andi $3, $3, 65535
//ABOVE PROGRAM WORKS


//BELOW PROGRAM WORKS

//30420000 //   andi $2, $2, 0; //reset [$2] to zero
//30630000 //1) andi $3, $3, 0; //resets[$3] to zero
//20420007 //2) addi $2, $2, 7; // should sets [$2] = 7
//00621832 //3) ssub $3, $3, $2; //should set [$3] = 0
//00431832 // ssub $3, $2, $3
//3021FFFF // andi $1, $1, 65535
//3063FFFF //andi $3, $3, 65535

//ABOVE PROGRAM WORKS


//BELOW PROGRAM WORKS
//30630000 //0) andi $3, $3, 0;
//30630000 //1) andi $3, $3, 0;
//30630000 //2) andi $3, $3, 0;
//0C000005 //3) jal 5
//00641822 //4) sub $3,$3,$4 NOTE: PC should go from 6 --> 4 here
//00621820 //5) add $3,$3,$2 NOTE: PC should = 5 here and skip 4
//3463FFFE //6) ori $3, $3, 65534
//03E00008 //7) jr $31
//ABOVE PROGRAM WORKS

//below testing for LUI
//30630000 // andi $3, $3, 0  //resets $3 to zero
//30420000 // andi $2, $2, 0  //resets $2 to zero
//3C03FFFF // lui $3, 65535 //$3 = 0xFFFF0000 // this hex value is correct
//3021FFFF // andi $1, $1, 65535
//34630000 // ori $3, $3, 0 --> this hex value is correct
//above testing for LUI


//below test code works
//30630000 // andi $3, $3, 0  //resets $3 to zero
//30420000 // andi $2, $2, 0  //resets $2 to zero
//3C03FFFF // lui $3, 65535 //$3 = 0xFFFF0000
//2042000F // addi $2, $2, 15
//3463FFFA // ori $3, $3, 65530
//00622831 // sadd $5, $3, $2
//3021FFFF // andi $1, $1, 65535
//34A50000 // ori $5, $5, 0
//above test code works



//below test code works
//31080000 // andi $8, $8, 0 --> clears out $8
//3C087000 // should be lui $8, 28672 --> after execution, $8 should = 1,879,048,192
//above test code works


//BELOW IS THE MAIN TESTING CODE WE NEED TO PASS TO DO LAB 7 (UNFINISHED)
30210000 // 0) andi $1, $1, 0 NOTE: GET RID OF THIS LINE BC ITS NOT IN ACTUAL TEST PROGRAM (JUST USING IT TO TEST IN SIMULATION)
//20210001 // 1) addi $1, $1, 1 [$1] = 1 NOTE: GET RID OF THIS LINE AFTER DONE SIMULATING

//START
20260000 // 0) addi $6, $1, 0 [$6] = [$1] NOTE: CHANGE THIS LINE AFTER DONE SIMULATING
31080000 // 1) andi $8, $8, 0 [$8] = 0
3C047000 // 2) lui $4, 28672 [$4] = 0x70000000 ->
3C057FFF // 3) lui $5, 32767 [$5] = 0x7FFF0000  
3508000B // 4) ori $8, $8, 11    [$8] = 0x0000000B

//LOOP:
10C1FFFF // 5) beq $6, $1, loop // I THINK THIS LINE WORKS **NOTE: WILL NEED TO CHANGE THIS LINE WHEN DONE WITH SIMULATION TESTING  
20260000 // 6) addi $6, $1, 0 // NOTE: CHANGE THIS LINE AFTER DONE SIMULATING
00013840 // 7) sll $7, $1, 1
01073820 // 8) add $7, $8, $7
//CALL TABLE:
00E00008 // 9) jr $7 
08000005 // 10) j loop // NOTE: THIS LINE WILL CHANGE WHEN DONE WITH SIMULATION TESTING

0C000017 //11) jal operation 0 **gets here when testing add8 instruction//NOTE: THIS NEEDS TO CHANGE WHEN DONE WITH SIMULATION TESTING
08000005 //12) j loop //NOTE: THIS NEEDS TO CHANGE WHEN DONE WITH SIMULATION TESTING

0C000019 //13) jal operation 1
08000005 //14) j loop //note: only need to change rightmost hex digit when finalizing test program

0C00001B //15) jal operation 2
08000005 //16) j loop //note: only need to change rightmost hex digit when finalizing test program

0C00001D //17) jal operation 3
08000005 //18) j loop //note: only need to change rightmost hex digit when finalizing test program

0C00001F //19) jal operation 4
08000005 //20) j loop //note: only need to change rightmost hex digit when finalizing test program

0C000021 //21) jal operation 5
08000005 //22) j loop //note: only need to change rightmost hex digit when finalizing test program

 // operation 0 below
0085102D //23) add8 $2, $4, $5 [$2] = 0xEFFF0000
03E00008 //24) jr $31 

 //operation 1 below
3C021000 // 25) lui $2, 4096 [$2] = 0x10000000
03E00008 // 26) jr $31

 //operation 2 below
0045002F // 27) rbit $2, $5
03E00008 // 26) jr $31 // 28) jr $31

 //operation 3 below
00440030 // 29) rev $2, $4
03E00008 // 26) jr $31 // 30) jr $31

 //operation 4 below
00A51031 // 31) sadd $2, $5, $5
03E00008 // 26) jr $31 // 32) jr $31

 //operation 5 below
00851032 // 33) ssub $2, $4, $5
03E00008 // 26) jr $31 // 34) jr $31




















